classdef PathFollowingRobot < handle
    properties
        SerialPort
        Waypoints
        CurrentWaypointIndex
        FuzzySystem
        Running
        MapFigure
        PathPlot
        RobotPlot
        WaypointPlot
        LastPositionTime
        PositionHistory
        LinearSpeed = 0.3333; % meters per second
        DeltaT = 0.775; % seconds
    end
    
    methods
        function obj = PathFollowingRobot(portName)
            % Initialize serial port
            obj.SerialPort = serialport(portName, 115200);
            configureTerminator(obj.SerialPort, "LF");
            flush(obj.SerialPort);
            
            % Load waypoints (your waypoints array here)
            obj.Waypoints = [
                7.214920000, 124.249217000;
                7.214920006, 124.249217231;
                % ... rest of your waypoints ...
                7.214928802, 124.249556109;
                7.214928808, 124.249556340
            ];
            
            obj.CurrentWaypointIndex = 1;
            obj.Running = false;
            obj.PositionHistory = [];
            obj.LastPositionTime = datetime('now');
            
            % Initialize fuzzy logic system with error handling
            try
                if ~exist('path_following.fis', 'file')
                    % Create FIS if it doesn't exist
                    createFuzzySystem();
                end
                obj.FuzzySystem = readfis('path_following.fis');
                
                % Verify FIS is properly loaded
                if isempty(obj.FuzzySystem.Inputs) || isempty(obj.FuzzySystem.Outputs)
                    error('FIS not properly initialized');
                end
            catch ME
                error('Failed to initialize fuzzy system: %s', ME.message);
            end
            
            % Initialize map visualization
            obj.initializeMap();
            
            disp('Robot initialized and ready to run');
        end
        
        function initializeMap(obj)
            obj.MapFigure = figure('Name', 'Robot Path Monitoring', 'NumberTitle', 'off');
            
            [lat, lon] = obj.convertToNumeric(obj.Waypoints);
            obj.WaypointPlot = geoplot(lat, lon, 'g-', 'LineWidth', 2);
            hold on;
            obj.WaypointPlot = geoscatter(lat, lon, 'filled', 'MarkerFaceColor', 'red');
            
            obj.PathPlot = geoplot(lat(1), lon(1), 'b-', 'LineWidth', 1.5);
            obj.RobotPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'blue');
            
            geobasemap('satellite');
            title('Robot Path Monitoring');
            legend('Planned Path', 'Waypoints', 'Robot Path', 'Robot Position');
            drawnow;
        end
        
        function [lat, lon] = convertToNumeric(~, waypoints)
            lat = waypoints(:,1);
            lon = waypoints(:,2);
        end
        
        function updateMap(obj, currentLat, currentLon)
            xData = obj.PathPlot.XData;
            yData = obj.PathPlot.YData;
            
            obj.PathPlot.XData = [xData, currentLat];
            obj.PathPlot.YData = [yData, currentLon];
            obj.PositionHistory = [obj.PositionHistory; currentLat, currentLon];
            
            obj.RobotPlot.LatitudeData = currentLat;
            obj.RobotPlot.LongitudeData = currentLon;
            
            targetLat = obj.Waypoints(obj.CurrentWaypointIndex, 1);
            targetLon = obj.Waypoints(obj.CurrentWaypointIndex, 2);
            geoscatter(targetLat, targetLon, 100, 'filled', 'MarkerFaceColor', 'yellow');
            
            latLim = [min([currentLat; obj.Waypoints(:,1)])-0.0001, max([currentLat; obj.Waypoints(:,1)])+0.0001];
            lonLim = [min([currentLon; obj.Waypoints(:,2)])-0.0001, max([currentLon; obj.Waypoints(:,2)])+0.0001];
            geolimits(latLim, lonLim);
            
            drawnow;
        end
        
        function start(obj)
            obj.Running = true;
            obj.run();
        end
        
        function stop(obj)
            obj.Running = false;
            % Send stop command to robot
            writeline(obj.SerialPort, "CMD:0,0");
        end
        
        function run(obj)
            while obj.Running
                if obj.SerialPort.NumBytesAvailable > 0
                    data = readline(obj.SerialPort);
                    
                    if startsWith(data, "GPS:")
                        try
                            gpsData = sscanf(data, "GPS:%f,%f,%f,%f");
                            if length(gpsData) == 4
                                currentLat = gpsData(1);
                                currentLon = gpsData(2);
                                speed = gpsData(3);
                                heading = gpsData(4);
                                
                                obj.updateMap(currentLat, currentLon);
                                
                                % Calculate distance to current waypoint
                                target = obj.Waypoints(obj.CurrentWaypointIndex, :);
                                distance = obj.calculateDistance(currentLat, currentLon, target(1), target(2));
                                
                                % Calculate expected distance traveled
                                expectedDistance = obj.LinearSpeed * 0.5 * obj.DeltaT;
                                
                                % Check if reached waypoint with dynamic threshold
                                if distance < max(0.0001, expectedDistance/2)
                                    obj.CurrentWaypointIndex = min(obj.CurrentWaypointIndex + 1, size(obj.Waypoints, 1));
                                    if obj.CurrentWaypointIndex == size(obj.Waypoints, 1)
                                        obj.stop();
                                        disp('Final waypoint reached!');
                                        return;
                                    end
                                end
                                
                                % Calculate bearing and error
                                bearing = obj.calculateBearing(currentLat, currentLon, target(1), target(2));
                                headingError = obj.wrapTo180(bearing - heading);
                                
                                % Adjust speed based on distance to waypoint
                                speedPercentage = min(100, max(30, (distance / expectedDistance) * 100));
                                
                                % Fuzzy logic control with error handling
                                try
                                    inputs = [distance, headingError];
                                    outputs = evalfis(obj.FuzzySystem, inputs);
                                    
                                    % Scale outputs by speed percentage
                                    leftPWM = round(outputs(1) * (speedPercentage/100));
                                    rightPWM = round(outputs(2) * (speedPercentage/100));
                                    
                                    % Send motor commands
                                    cmdStr = sprintf("CMD:%d,%d", leftPWM, rightPWM);
                                    writeline(obj.SerialPort, cmdStr);
                                catch ME
                                    fprintf('Fuzzy logic error: %s\n', ME.message);
                                    writeline(obj.SerialPort, "CMD:0,0");
                                end
                            end
                        catch ME
                            fprintf('Error processing GPS data: %s\n', ME.message);
                        end
                    end
                end
                pause(0.1);
            end
        end
        
        function distance = calculateDistance(~, lat1, lon1, lat2, lon2)
            R = 6371000; % Earth radius in meters
            dLat = deg2rad(lat2-lat1);
            dLon = deg2rad(lon2-lon1);
            a = sin(dLat/2) * sin(dLat/2) + ...
                cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * ...
                sin(dLon/2) * sin(dLon/2);
            c = 2 * atan2(sqrt(a), sqrt(1-a));
            distance = R * c;
        end
        
        function bearing = calculateBearing(~, lat1, lon1, lat2, lon2)
            lat1 = deg2rad(lat1);
            lon1 = deg2rad(lon1);
            lat2 = deg2rad(lat2);
            lon2 = deg2rad(lon2);
            
            y = sin(lon2-lon1) * cos(lat2);
            x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
            bearing = rad2deg(atan2(y, x));
        end
        
        function angle = wrapTo180(~, angle)
            angle = mod(angle + 180, 360) - 180;
        end
        
        function delete(obj)
            if obj.Running
                obj.stop();
            end
            clear obj.SerialPort;
        end
    end
end

%serialportlist
%robot = PathFollowingRobot('COM7');
%robot.start();
%robot.stop();
%clear all; 
%instrreset;



function createFuzzySystem()
    % Create new FIS using modern syntax
    fis = mamfis('Name', 'path_following');
    
    % Add distance_error input (3 membership functions)
    fis = addInput(fis, [0 5], 'Name', 'distance_error');
    fis = addMF(fis, 'distance_error', 'trimf', [0 0 2.5], 'Name', 'Close');
    fis = addMF(fis, 'distance_error', 'trimf', [0.5 2.5 4.5], 'Name', 'Medium');
    fis = addMF(fis, 'distance_error', 'trimf', [2.5 5 5], 'Name', 'Far');
    
    % Add heading_error input (3 membership functions)
    fis = addInput(fis, [-180 180], 'Name', 'heading_error');
    fis = addMF(fis, 'heading_error', 'trimf', [-180 -180 -45], 'Name', 'Left');
    fis = addMF(fis, 'heading_error', 'trimf', [-90 0 90], 'Name', 'Straight');
    fis = addMF(fis, 'heading_error', 'trimf', [45 180 180], 'Name', 'Right');
    
    % Add pwm_left output (3 membership functions)
    fis = addOutput(fis, [-100 100], 'Name', 'pwm_left');
    fis = addMF(fis, 'pwm_left', 'trimf', [-100 -100 0], 'Name', 'Reverse');
    fis = addMF(fis, 'pwm_left', 'trimf', [-50 0 50], 'Name', 'Slow');
    fis = addMF(fis, 'pwm_left', 'trimf', [0 100 100], 'Name', 'Forward');
    
    % Add pwm_right output (same as pwm_left)
    fis = addOutput(fis, [-100 100], 'Name', 'pwm_right');
    fis = addMF(fis, 'pwm_right', 'trimf', [-100 -100 0], 'Name', 'Reverse');
    fis = addMF(fis, 'pwm_right', 'trimf', [-50 0 50], 'Name', 'Slow');
    fis = addMF(fis, 'pwm_right', 'trimf', [0 100 100], 'Name', 'Forward');
    
    % Simplified 3x3 Rule Base
    ruleList = [
    1  1  3  1  1  1;  % If Close and Left, then Forward Left and Reverse Right
    1  2  2  2  1  1;  % If Close and Straight, then Slow both
    1  3  1  3  1  1;  % If Close and Right, then Reverse Left and Forward Right
    
    2  1  3  2  1  1;  % If Medium and Left, then Forward Left and Slow Right
    2  2  3  3  1  1;  % If Medium and Straight, then Forward both
    2  3  2  3  1  1;  % If Medium and Right, then Slow Left and Forward Right
    
    3  1  3  1  1  1;  % If Far and Left, then Forward Left and Reverse Right
    3  2  3  3  1  1;  % If Far and Straight, then Forward both
    3  3  1  3  1  1;  % If Far and Right, then Reverse Left and Forward Right
    ];
    
    fis = addRule(fis, ruleList);
    
    % Save FIS
    writeFIS(fis, 'path_following');
    
    % Plot membership functions
    figure;
    subplot(2,2,1); plotmf(fis, 'input', 1); title('Distance Error');
    subplot(2,2,2); plotmf(fis, 'input', 2); title('Heading Error');
    subplot(2,2,3); plotmf(fis, 'output', 1); title('PWM Left');
    subplot(2,2,4); plotmf(fis, 'output', 2); title('PWM Right');
    
    % Plot rule surface
    figure;
    gensurf(fis);
    title('Control Surface');
end
