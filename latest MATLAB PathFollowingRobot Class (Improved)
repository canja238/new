classdef PathFollowingRobot < handle
    properties
        SerialPort
        Waypoints
        CurrentWaypointIndex
        FuzzySystem
        Running
        MapFigure
        PathPlot
        RobotPlot
        WaypointPlot
        LastPositionTime
        PositionHistory
        LinearSpeed = 0.3333 % meters per second
        DeltaT = 0.775 % seconds
        PositionThreshold = 0.00005 % degrees (~5 meters)
        HeadingThreshold = 15 % degrees
    end
    
    methods
        function obj = PathFollowingRobot(portName)
            % Initialize serial port
            obj.SerialPort = serialport(portName, 115200);
            configureTerminator(obj.SerialPort, "LF");
            flush(obj.SerialPort);
            
            % Load waypoints
            obj.Waypoints = [
                7.214920000, 124.249217000;
                7.214920006, 124.249217231;
                % ... (rest of your waypoints)
                7.214927296, 124.249497897;
            ];
            
            obj.CurrentWaypointIndex = 1;
            obj.Running = false;
            obj.PositionHistory = [];
            obj.LastPositionTime = datetime('now');
            
            % Initialize fuzzy logic system
            obj.initializeFuzzySystem();
            
            % Initialize map visualization
            obj.initializeMap();
            
            disp('Robot initialized and ready to run');
        end
        
        function initializeFuzzySystem(obj)
            % Create new FIS using modern syntax
            fis = mamfis('Name', 'path_following');
            
            % Add xError input (latitude error in degrees)
            fis = addInput(fis, [-0.0005 0.0005], 'Name', 'xError');
            fis = addMF(fis, 'xError', 'trimf', [-0.0005 -0.0005 -0.00025], 'Name', 'Left');
            fis = addMF(fis, 'xError', 'trimf', [-0.0003 0 0.0003], 'Name', 'Center');
            fis = addMF(fis, 'xError', 'trimf', [0.00025 0.0005 0.0005], 'Name', 'Right');
            
            % Add yError input (longitude error in degrees)
            fis = addInput(fis, [-0.0005 0.0005], 'Name', 'yError');
            fis = addMF(fis, 'yError', 'trimf', [-0.0005 -0.0005 -0.00025], 'Name', 'Behind');
            fis = addMF(fis, 'yError', 'trimf', [-0.0003 0 0.0003], 'Name', 'OnTrack');
            fis = addMF(fis, 'yError', 'trimf', [0.00025 0.0005 0.0005], 'Name', 'Ahead');
            
            % Add heading_error input
            fis = addInput(fis, [-180 180], 'Name', 'heading_error');
            fis = addMF(fis, 'heading_error', 'trimf', [-180 -180 -45], 'Name', 'Left');
            fis = addMF(fis, 'heading_error', 'trimf', [-30 0 30], 'Name', 'Straight');
            fis = addMF(fis, 'heading_error', 'trimf', [45 180 180], 'Name', 'Right');
            
            % Add pwm_left output
            fis = addOutput(fis, [-255 255], 'Name', 'pwm_left');
            fis = addMF(fis, 'pwm_left', 'trimf', [-255 -255 -127], 'Name', 'Reverse');
            fis = addMF(fis, 'pwm_left', 'trimf', [-191 0 191], 'Name', 'Slow');
            fis = addMF(fis, 'pwm_left', 'trimf', [127 255 255], 'Name', 'Forward');
            
            % Add pwm_right output
            fis = addOutput(fis, [-255 255], 'Name', 'pwm_right');
            fis = addMF(fis, 'pwm_right', 'trimf', [-255 -255 -127], 'Name', 'Reverse');
            fis = addMF(fis, 'pwm_right', 'trimf', [-191 0 191], 'Name', 'Slow');
            fis = addMF(fis, 'pwm_right', 'trimf', [127 255 255], 'Name', 'Forward');
            
            % Rule Base (3x3x3 = 27 rules)
            ruleList = [
            % xError, yError, heading_error -> pwm_left, pwm_right
            1 1 1 3 1 1 1;  % Far left, behind, left turn -> strong left, weak right
            1 2 2 3 2 1 1;  % Far left, on track, straight -> medium left, medium right
            1 3 3 1 3 1 1;  % Far left, ahead, right turn -> weak left, strong right
            
            2 1 1 3 1 1 1;  % Center, behind, left turn -> strong left, weak right
            2 2 2 3 3 1 1;  % Center, on track, straight -> forward both
            2 3 3 1 3 1 1;  % Center, ahead, right turn -> weak left, strong right
            
            3 1 1 3 3 1 1;  % Far right, behind, left turn -> strong left, strong right
            3 2 2 2 3 1 1;  % Far right, on track, straight -> medium left, medium right
            3 3 3 1 3 1 1;  % Far right, ahead, right turn -> weak left, strong right
            ];
            
            fis = addRule(fis, ruleList);
            obj.FuzzySystem = fis;
            
            % Plot membership functions
            figure('Name', 'Fuzzy Membership Functions');
            subplot(2,3,1); plotmf(fis, 'input', 1); title('xError (Latitude)');
            subplot(2,3,2); plotmf(fis, 'input', 2); title('yError (Longitude)');
            subplot(2,3,3); plotmf(fis, 'input', 3); title('Heading Error');
            subplot(2,3,4); plotmf(fis, 'output', 1); title('PWM Left');
            subplot(2,3,5); plotmf(fis, 'output', 2); title('PWM Right');
            
            % Plot rule surfaces
            figure('Name', 'Control Surfaces');
            subplot(2,2,1); gensurf(fis, [1 2], 1); title('xError & yError -> PWM Left');
            subplot(2,2,2); gensurf(fis, [1 2], 2); title('xError & yError -> PWM Right');
            subplot(2,2,3); gensurf(fis, [1 3], 1); title('xError & Heading -> PWM Left');
            subplot(2,2,4); gensurf(fis, [2 3], 2); title('yError & Heading -> PWM Right');
        end
        
        function initializeMap(obj)
            obj.MapFigure = figure('Name', 'Robot Path Monitoring', 'NumberTitle', 'off');
            
            [lat, lon] = obj.convertToNumeric(obj.Waypoints);
            obj.WaypointPlot = geoplot(lat, lon, 'g-', 'LineWidth', 2);
            hold on;
            obj.WaypointPlot = geoscatter(lat, lon, 'filled', 'MarkerFaceColor', 'red');
            
            obj.PathPlot = geoplot(lat(1), lon(1), 'b-', 'LineWidth', 1.5);
            obj.RobotPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'blue');
            
            geobasemap('satellite');
            title('Robot Path Monitoring');
            legend('Planned Path', 'Waypoints', 'Robot Path', 'Robot Position');
            drawnow;
        end
        
        function [lat, lon] = convertToNumeric(~, waypoints)
            lat = waypoints(:,1);
            lon = waypoints(:,2);
        end
        
        function updateMap(obj, currentLat, currentLon)
            xData = obj.PathPlot.XData;
            yData = obj.PathPlot.YData;
            
            obj.PathPlot.XData = [xData, currentLat];
            obj.PathPlot.YData = [yData, currentLon];
            obj.PositionHistory = [obj.PositionHistory; currentLat, currentLon];
            
            obj.RobotPlot.LatitudeData = currentLat;
            obj.RobotPlot.LongitudeData = currentLon;
            
            targetLat = obj.Waypoints(obj.CurrentWaypointIndex, 1);
            targetLon = obj.Waypoints(obj.CurrentWaypointIndex, 2);
            geoscatter(targetLat, targetLon, 100, 'filled', 'MarkerFaceColor', 'yellow');
            
            latLim = [min([currentLat; obj.Waypoints(:,1)])-0.0001, max([currentLat; obj.Waypoints(:,1)])+0.0001];
            lonLim = [min([currentLon; obj.Waypoints(:,2)])-0.0001, max([currentLon; obj.Waypoints(:,2)])+0.0001];
            geolimits(latLim, lonLim);
            
            drawnow;
        end
        
        function start(obj)
            obj.Running = true;
            obj.run();
        end
        
        function stop(obj)
            obj.Running = false;
            writeline(obj.SerialPort, "CMD:0,0");
        end
        
        function run(obj)
            while obj.Running
                if obj.SerialPort.NumBytesAvailable > 0
                    data = readline(obj.SerialPort);
                    
                    if startsWith(data, "GPS:")
                        try
                            gpsData = sscanf(data, "GPS:%f,%f,%f,%f");
                            if length(gpsData) == 4
                                currentLat = gpsData(1);
                                currentLon = gpsData(2);
                                speed = gpsData(3);
                                heading = gpsData(4);
                                
                                obj.updateMap(currentLat, currentLon);
                                
                                % Get current target waypoint
                                target = obj.Waypoints(obj.CurrentWaypointIndex, :);
                                targetLat = target(1);
                                targetLon = target(2);
                                
                                % Calculate position errors
                                xError = targetLat - currentLat; % Latitude error
                                yError = targetLon - currentLon; % Longitude error
                                
                                % Calculate distance to waypoint
                                distance = obj.calculateDistance(currentLat, currentLon, targetLat, targetLon);
                                
                                % Calculate bearing and heading error
                                bearing = obj.calculateBearing(currentLat, currentLon, targetLat, targetLon);
                                headingError = obj.wrapTo180(bearing - heading);
                                
                                % Check if reached waypoint
                                if distance < obj.PositionThreshold && abs(headingError) < obj.HeadingThreshold
                                    obj.CurrentWaypointIndex = min(obj.CurrentWaypointIndex + 1, size(obj.Waypoints, 1));
                                    if obj.CurrentWaypointIndex == size(obj.Waypoints, 1)
                                        obj.stop();
                                        disp('Final waypoint reached!');
                                        return;
                                    end
                                    continue;
                                end
                                
                                % Scale errors for fuzzy system
                                scaledXError = xError * 1e5; % Scale to reasonable range
                                scaledYError = yError * 1e5; % Scale to reasonable range
                                
                                % Fuzzy logic control
                                inputs = [scaledXError, scaledYError, headingError];
                                outputs = evalfis(obj.FuzzySystem, inputs);
                                
                                % Scale outputs by distance factor (reduce speed when close)
                                distanceFactor = min(1, distance / (obj.PositionThreshold * 2));
                                leftPWM = round(outputs(1) * distanceFactor);
                                rightPWM = round(outputs(2) * distanceFactor);
                                
                                % Constrain PWM values
                                leftPWM = max(-255, min(255, leftPWM));
                                rightPWM = max(-255, min(255, rightPWM));
                                
                                % Send motor commands
                                cmdStr = sprintf("CMD:%d,%d", leftPWM, rightPWM);
                                writeline(obj.SerialPort, cmdStr);
                                
                                % Debug output
                                fprintf('Position: (%.6f, %.6f) | Target: (%.6f, %.6f)\n', ...
                                    currentLat, currentLon, targetLat, targetLon);
                                fprintf('Errors: x=%.2e, y=%.2e | Heading: %.1f° (Error: %.1f°)\n', ...
                                    xError, yError, heading, headingError);
                                fprintf('Outputs: L=%d, R=%d | Distance: %.2fm\n\n', ...
                                    leftPWM, rightPWM, distance);
                            end
                        catch ME
                            fprintf('Error processing GPS data: %s\n', ME.message);
                        end
                    end
                end
                pause(0.1);
            end
        end
        
        function distance = calculateDistance(~, lat1, lon1, lat2, lon2)
            R = 6371000; % Earth radius in meters
            dLat = deg2rad(lat2-lat1);
            dLon = deg2rad(lon2-lon1);
            a = sin(dLat/2) * sin(dLat/2) + ...
                cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * ...
                sin(dLon/2) * sin(dLon/2);
            c = 2 * atan2(sqrt(a), sqrt(1-a));
            distance = R * c;
        end
        
        function bearing = calculateBearing(~, lat1, lon1, lat2, lon2)
            lat1 = deg2rad(lat1);
            lon1 = deg2rad(lon1);
            lat2 = deg2rad(lat2);
            lon2 = deg2rad(lon2);
            
            y = sin(lon2-lon1) * cos(lat2);
            x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
            bearing = rad2deg(atan2(y, x));
        end
        
        function angle = wrapTo180(~, angle)
            angle = mod(angle + 180, 360) - 180;
        end
        
        function delete(obj)
            if obj.Running
                obj.stop();
            end
            clear obj.SerialPort;
        end
    end
end
